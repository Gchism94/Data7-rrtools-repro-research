[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Data7 Reproducible Research with GitHub and RStudio Workshop Companion Book",
    "section": "Introduction",
    "text": "Introduction\nIntroduction to the workshop and what you can expect to take away"
  },
  {
    "objectID": "index.html#create-a-research-compendium",
    "href": "index.html#create-a-research-compendium",
    "title": "Data7 Reproducible Research with GitHub and RStudio Workshop Companion Book",
    "section": "Create a Research Compendium",
    "text": "Create a Research Compendium\nCreate a template Research Compendium from rrtools"
  },
  {
    "objectID": "index.html#manage-functionality-as-a-package",
    "href": "index.html#manage-functionality-as-a-package",
    "title": "Data7 Reproducible Research with GitHub and RStudio Workshop Companion Book",
    "section": "Manage functionality as a package",
    "text": "Manage functionality as a package\nMake your Compendium an R Package to ensure reproducibility"
  },
  {
    "objectID": "index.html#reproduce-a-paper-with-distill",
    "href": "index.html#reproduce-a-paper-with-distill",
    "title": "Data7 Reproducible Research with GitHub and RStudio Workshop Companion Book",
    "section": "Reproduce a paper with Distill",
    "text": "Reproduce a paper with Distill\nProduce a Distill R Markdown version of a paper\n\n\nLevel\nIntermediate\n\n\nPrerequisites:\nFamiliarity with Version Control through RStudio and R Markdown.\n\n\nSystem Requirements:\n\nPandoc (>= 1.17.2)\n\n\nLaTeX\nIf you don‚Äôt have LaTeX installed, consider installing TinyTeX, a custom LaTeX distribution based on TeX Live that is small in size but functions well in most cases, especially for R users.\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n\nCheck docs before before installing.\n\n\ndevtools requirements\nYou might also need a set of development tools to install and run devtools. On Windows, download and install Rtools, and devtools takes care of the rest. On Mac, install the Xcode command line tools. On Linux, install the R development package, usually called r-devel or r-base-dev.\n\n\n\n\nDisclaimer\nThese workshop materials are derived from materials authored by Anna Krystalli, and (Marwick 2019). The materials here have been updated to current best practices and for a condensed length. Additionally, the gillespie.csv dataset was replaced with the open source diabetes.csv Pima County Native American Diabetes dataset.\nThe original materials are licensed under a Creative Commons Attribution 4.0 International License.\n CC BY\n\n\n\nOriginal workshop based on:\n\nResearch compendium cboettig/noise-phenomena: Supplement to: ‚ÄúFrom noise to knowledge: how randomness generates novel phenomena and reveals information‚Äù by Carl Boettiger licensed under CC BY 4.0. \nMarwick, B., Boettiger, C. & L. Mullen (2017). Packaging data analytical work reproducibly using R (and friends). PeerJ Preprints 5:e3192v1 https://doi.org/10.7287/peerj.preprints.3192v1\n\n\n\n\n\nMarwick, Ben. 2019. ‚ÄúRrtools: Creates a Reproducible Research Compendium.‚Äù https://github.com/benmarwick/rrtools."
  },
  {
    "objectID": "intro.html#research-is-increasingly-computational",
    "href": "intro.html#research-is-increasingly-computational",
    "title": "Introduction",
    "section": "Research is increasingly computational",
    "text": "Research is increasingly computational\n\nCode and data are important research outputs\n\nYet, we mainly on publishing papers.\n\nCalls for openness\n\nStick: we have a reproducibility crisis\nCarrot: open science promotes equity and collaboration\n\n\n\nWe however lack the means for such openness."
  },
  {
    "objectID": "intro.html#enter-the-research-compendium",
    "href": "intro.html#enter-the-research-compendium",
    "title": "Introduction",
    "section": "Enter the Research Compendium",
    "text": "Enter the Research Compendium\n\nThe goal of a research compendium is to provide a standard and easily recognizable way for organizing the digital materials of a project to enable others to inspect, reproduce, and extend the research.\n\n\nThree Generic Principles\n\nOrganize files according to best practices\n\nHelp others understand the structure of your project.\nSupports tool building which takes advantage of the shared structure.\n\nSeparate of data, method, and output, while making the relationship between them clear.\nSpecify the computational environment that was used for the original analysis."
  },
  {
    "objectID": "intro.html#r-community-response",
    "href": "intro.html#r-community-response",
    "title": "Introduction",
    "section": "R community response",
    "text": "R community response\n\nR packages can be used as a research compendium for organizing and sharing files!\n\n\n_Wickham, H. (2017) Research compendia. Note prepared for the 2017 rOpenSci Unconf\nBen Marwick, Carl Boettiger & Lincoln Mullen (2018) Packaging Data Analytical Work Reproducibly Using R (and Friends), The American Statistician, 72:1, 80-88, DOI: <10.1080/00031305.2017.1375986>\n\n\n\n\nExample use of the R package structure for a research compendium (Marwick, Boettiger, and Mullen 2018)"
  },
  {
    "objectID": "intro.html#enter-rrtools",
    "href": "intro.html#enter-rrtools",
    "title": "Introduction",
    "section": "Enter rrtools",
    "text": "Enter rrtools\n\nThe goal of rrtools is to provide instructions, templates, and functions for making a template compendium suitable for producing reproducible research with R.\n\nrrtools build on tools & best practices for R package development to\n\nOrganize files\nManage dependencies\nShare code\nDocument code\nCheck and test code where applicable\n\nrrtools extends and works with a number of R packages:\n\ndevtools: functions for package development\nusethis: automates repetitive tasks that arise during project setup and development\nbookdown: facilitates writing books and long-form articles/reports with R Markdown"
  },
  {
    "objectID": "intro.html#live-coding",
    "href": "intro.html#live-coding",
    "title": "Introduction",
    "section": "Live coding",
    "text": "Live coding\nI practice live coding üò® during my workshops so that you can follow along and have your version of the R scripts.\nHowever, the materials in this book will help you along the way!"
  },
  {
    "objectID": "intro.html#lets-dive-in",
    "href": "intro.html#lets-dive-in",
    "title": "Introduction",
    "section": "Let‚Äôs dive in!",
    "text": "Let‚Äôs dive in!\n\n\n\n\nMarwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018. ‚ÄúPackaging Data Analytical Work Reproducibly Using R (and Friends).‚Äù The American Statistician 72 (1): 80‚Äì88. https://doi.org/10.1080/00031305.2017.1375986."
  },
  {
    "objectID": "create-compendium.html",
    "href": "create-compendium.html",
    "title": "Create a Research Compendium",
    "section": "",
    "text": "Git into GitHub\nGo you your Repositories\nClick on New Repository\nName the repository rrcompendium\nAdd a README\nCreate your Repository\nClick on Code\nCopy the HTTPS URL\n\n\n\n\n\n\nClick on new RStudio Project\nSelect Version Control\nSelect Git\nPaste your URL from above\nStart Project\n\n\n\n\n\nNext, let‚Äôs install the packages we‚Äôll need, starting with rrtools (if you haven‚Äôt got devtools installed, you‚Äôll need to before you can install rrtools from GitHub).\n\ninstall.packages(c(\"devtools\")) \ndevtools::install_github(\"benmarwick/rrtools\")\n\nInstalling rrtools imports many of the packages we‚Äôll need today (e.g., the imports section of the DESCRIPTION file).\nImports: devtools, git2r, whisker, rstudioapi, rmarkdown, curl, RCurl,\n    jsonlite, methods, httr, usethis, clisymbols,\n    crayon, glue, bookdown, here"
  },
  {
    "objectID": "create-compendium.html#configure-git",
    "href": "create-compendium.html#configure-git",
    "title": "Create a Research Compendium",
    "section": "Configure git",
    "text": "Configure git\nIf your git configuration hasn‚Äôt been set yet, we need to make sure we do so.\n\nSet git token\n\nusethis::create_github_token()\n\n\nName your new personal access token (PAT)\nSet expiration to whenever (default is 30 days)\nClick Generate token\nSave your Token in a safe place; you will not be able to see it again\nCopy your Token and close the window\n\n\n\n\nRegister git token\nPaste the following code from the output above and paste your Token\n\ngitcreds::gitcreds_set()\n\n? Enter password or token: ghp_##################\n-> Adding new credentials...\n-> Removing credetials from cache...\n-> Done.\nCopy the generated PAT to paste into your .Renviron file as system variable GITHUB_PAT.\nYou can open your .Renviron file for editing with:\n\nusethis::edit_r_environ()\n\nPaste your copied PAT into your .Renviron file as system variable GITHUB_PAT, save and close. Now every time R is reloaded, your PAT will be stored in system variable GITHUB_PAT."
  },
  {
    "objectID": "create-compendium.html#create-compendium",
    "href": "create-compendium.html#create-compendium",
    "title": "Create a Research Compendium",
    "section": "Create compendium",
    "text": "Create compendium\nLet‚Äôs start by creating a blank research compendium for us to work in.\n\nLoad library\nFirst we need to load rrtools\n\nlibrary(rrtools) \n\nThis performs a quick check to confirm you have Git installed and configured\nIf you do, you should see the following output in the console.\n‚úî Git is installed on this computer, your username is Greg T. Chism\n\n\n\nCreate Compendium\nNow we‚Äôre ready to create our compendium. We use rrtools::use_compendium() and supply it with a path for our new compendium. The final part of our path becomes the compendium name. Because the function effectively creates a package, only a single string of lowercase alpha characters is accepted as a name. Let‚Äôs use rrcompendium as the final part of our path.\nQuick tip: If you don‚Äôt know what path you‚Äôre currently in, you can check with the here package\n\nhere::here()\n\n[1] \"/Users/gregchism/Library/Documents/Desktop/rrtools-repro-research\"\nA way to short-hand this path is to say \"~/Desktop/rrtools-repro-research\", in which the ~ (tilde) is a shortcut for your home directory.\nTo create rrcompendium with a directory into your Desktop you can use:\n\nrrtools::use_compendium(\"~/Desktop/rrcompendium\")\n\nGo ahead and create a compendium at a location of your choice. Use the compendium name rrcompendium for ease of following the materials. If the call was successful you should see the following console output:\n‚úî Setting active project to '~/Desktop/rrcompendium'\n‚úî Creating 'R/'\n‚úî Creating 'man/'\n‚úî Writing 'DESCRIPTION'\n‚úî Writing 'NAMESPACE'\n‚úî Writing 'rrcompendium.Rproj'\n‚úî Adding '.Rproj.user' to '.gitignore'\n‚úî Adding '^rrcompendium\\\\.Rproj$', '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n‚úî Opening new project 'rrcompendium' in RStudio\n‚úî The package rrcompendium has been created\n‚úî Opening the new compendium in a new RStudio session...\n\nNext, you need to:  ‚Üì ‚Üì ‚Üì \n‚óè Edit the DESCRIPTION file\n‚óè Use other 'rrtools' functions to add components to the compendium\nand a new Rstudio session launched for the compendium.\nPeriodically update Imports: in the DESCRIPTION with packages your compendium needs using rrtools::add_dependencies_to_description()\n\n\n\nInspect templates\n.\n‚îú‚îÄ‚îÄ DESCRIPTION <- .............................package metadata\n|                                               dependency management\n‚îú‚îÄ‚îÄ NAMESPACE <- ...............................AUTO-GENERATED on build\n‚îú‚îÄ‚îÄ R <- .......................................folder for functions\n‚îú‚îÄ‚îÄ man <- .....................................AUTO-GENERATED on build\n‚îî‚îÄ‚îÄ rrcompendium.Rproj <- ......................rstudio project file\nrrtools::use_compendium() creates the bare backbone of infrastructure required for a research compendium. At this point it provides facilities to store general metadata about our compendium (e.g., bibliographic details to create a citation) and manage dependencies in the DESCRIPTION file and store and document functions in the R/ folder (note that you will have to create this now). Together these allow us to manage, install and share functionality associated with our project."
  },
  {
    "objectID": "create-compendium.html#update-description-file",
    "href": "create-compendium.html#update-description-file",
    "title": "Create a Research Compendium",
    "section": "Update description file",
    "text": "Update description file\nLet‚Äôs update some details in the DESCRIPTION file:\nPackage: rrcompendium\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(given = \"First\",\n           family = \"Last\",\n           role = c(\"aut\", \"cre\"),\n           email = \"first.last@example.com\")\nDescription: What the package does (one paragraph)\nLicense: What license it uses\nByteCompile: true\nEncoding: UTF-8\nLazyData: true\n\n\nTitle\nLet‚Äôs give our compendium a descriptive title:\nTitle: Reproducible Research Compendium using GitHub and RStudio\n\n\n\nVersion\nWe don‚Äôt need to change the version now but using semantic versioning for our compendium is essential to track versions, and can save us a lot of pain from accidental changes. In general, versions below 0.0.1 are in development or pre-releases, hence the DESCRIPTION file defaults to 0.0.0.9000.\n\n\n\nAuthors\nNext let‚Äôs specify the author of the compendium. Edit with your own details.\nNote that I changed the authors format to correct some bugs that I‚Äôve run across.\nAuthors:\n    person(given = \"Greg\",\n           family = \"Chism\", \"gchism@arizona.edu\", \n           role = c(\"aut\", \"cre\"))\nThe roles are important and can be assigned to several authors - see ?person for more details.\n\n\n\nDescription\nLet‚Äôs add a bit more detail about the contents of the compendium in the Description.\nDescription: This repository contains a template research compendium from the Workshop titled Reproducible Research Compendium using GitHub and RStudio\n\n\n\nLicense\nFinally, let‚Äôs add a license for the material we create. We‚Äôll use an GPLv3 License, which can be used for all components of a compendium. We can do this with:\n\n usethis::use_gpl3_license()\n\n‚úî Setting active project to '/cloud/project'\n‚úî Setting License field in DESCRIPTION to 'GPL (>= 3)'\n‚úî Writing 'LICENSE.md'\n‚úî Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\nThis creates a LICENSE.md file and updates the DESCRIPTION file with details of the license.\nLicense: GPL (>= 3)\n\n\n\nRecap\nWe‚Äôve finished updating our DESCRIPTION file! üéâ\nIt should look a bit like this:\nPackage: rrcompendium\nTitle: Title: Reproducible Research Compendium using GitHub and RStudio\nVersion: 0.0.0.9000\nAuthors:\n    person(given = \"Greg\",\n           family = \"Chism\", \"gchism@arizona.edu\", \n           role = c(\"aut\", \"cre\"))\nDescription: This repository contains a template research compendium from the Workshop titled Reproducible Research Compendium using GitHub and RStudio\nLicense: GPL (>= 3)\nByteCompile: true\nEncoding: UTF-8\nLazyData: true\nand your project folder should contain:\n.\n‚îú‚îÄ‚îÄ DESCRIPTION\n‚îú‚îÄ‚îÄ LICENSE\n‚îú‚îÄ‚îÄ LICENSE.md\n‚îú‚îÄ‚îÄ NAMESPACE\n‚îî‚îÄ‚îÄ rrcompendium.Rproj\nLet‚Äôs commit our work and move on to preparing our compendium for sharing on GitHub."
  },
  {
    "objectID": "create-compendium.html#create-readme",
    "href": "create-compendium.html#create-readme",
    "title": "Create a Research Compendium",
    "section": "Create README",
    "text": "Create README\nEvery GitHub repository needs a README landing page.\nWe can create an rrtoolsREADME template using:\n\nrrtools::use_readme_rmd()\n\n‚úî Creating 'README.Rmd' from template.\n‚úî Adding 'README.Rmd' to `.Rbuildignore`.\n‚óè Modify 'README.Rmd'\n‚úî Rendering README.Rmd to README.md for GitHub.\n‚úî Adding code of conduct.\n‚úî Creating 'CONDUCT.md' from template.\n‚úî Adding 'CONDUCT.md' to `.Rbuildignore`.\n‚úî Adding instructions to contributors.\n‚úî Creating 'CONTRIBUTING.md' from template.\n‚úî Adding 'CONTRIBUTING.md' to `.Rbuildignore`.\nThis generates README.Rmd and renders it to README.md, ready to display on GitHub. It contains:\n\nA template citation to show others how to cite your project.\nLicense information for the text, figures, code and data in your compendium\n\n\n---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n``{r, echo = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"README-\"\n)\n``\n\n# rrcompendium\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/Gchism94/rrcompendium/master?urlpath=rstudio)\n\nThis repository contains the data and code for our paper:\n\n> Authors, (YYYY). _Title of paper_. Name of journal/book <https://doi.org/xxx/xxx>\n\nOur pre-print is online here:\n\n> Authors, (YYYY). _Title of paper_. Name of journal/book, Accessed 03 May 2019. Online at <https://doi.org/xxx/xxx>\n\n\n### How to cite\n\nPlease cite this compendium as:\n\n> Authors, (2019). _Compendium of R code and data for 'Title of paper'_. Accessed 03 May 2019. Online at <https://doi.org/xxx/xxx>\n\n### How to download or install\n\nYou can download the compendium as a zip from from this URL: </archive/master.zip>\n\nOr you can install this compendium as an R package, rrcompendium, from GitHub with:\n### Licenses\n\n**Text and figures :**  [CC-BY-4.0](http://creativecommons.org/licenses/by/4.0/)\n\n**Code :** See the [DESCRIPTION](DESCRIPTION) file\n\n**Data :** [CC-0](http://creativecommons.org/publicdomain/zero/1.0/) attribution requested in reuse\n\n### Contributions\n\nWe welcome contributions from everyone. Before you get started, please see our [contributor guidelines](CONTRIBUTING.md). Please note that this project is released with a [Contributor Code of Conduct](CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nThe call also adds two other markdown files:\n\nCONDUCT.md: a code of conduct for users\nCONTRIBUTING.md:: basic instructions for people who want to contribute to our compendium\n\n\n\nRender README.md, commit and push to GitHub\n\nWe‚Äôve now completed our rrtools README.Rmd! üéâ\n\nRender it to update the README.md file which is displayed on GitHub\nCommit and push to GitHub.\n\n\n\nYour project folder should contain:\n.\n‚îú‚îÄ‚îÄ CONDUCT.md\n‚îú‚îÄ‚îÄ CONTRIBUTING.md\n‚îú‚îÄ‚îÄ DESCRIPTION\n‚îú‚îÄ‚îÄ LICENSE.md\n‚îú‚îÄ‚îÄ NAMESPACE\n‚îú‚îÄ‚îÄ README.Rmd\n‚îú‚îÄ‚îÄ README.md\n‚îî‚îÄ‚îÄ rrcompendium.Rproj"
  },
  {
    "objectID": "create-compendium.html#setting-up-the-analysis-folder",
    "href": "create-compendium.html#setting-up-the-analysis-folder",
    "title": "Create a Research Compendium",
    "section": "Setting up the analysis folder",
    "text": "Setting up the analysis folder\n\nCreate analysis\nWe now need an analysis folder to contain our analyses and paper. We can do this using function rrtools::use_analysis()\nThe function has three location = options:\n\ntop_level to create a top-level analysis/ directory\ninst to create an inst/ directory (so that all the sub-directories are available after the package is installed)\nvignettes to create a vignettes/ directory (and automatically update the DESCRIPTION).\n\nThe default is a top-level analysis/.\n\nrrtools::use_analysis()\n\n‚úî Adding bookdown to Imports\n‚úî Creating 'analysis' directory and contents\n‚úî Creating 'analysis'\n‚úî Creating 'analysis/paper'\n‚úî Creating 'analysis/figures'\n‚úî Creating 'analysis/templates'\n‚úî Creating 'analysis/data'\n‚úî Creating 'analysis/data/raw_data'\n‚úî Creating 'analysis/data/derived_data'\n‚úî Creating 'references.bib' from template.\n‚úî Creating 'paper.Rmd' from template.\n\nNext, you need to:  ‚Üì ‚Üì ‚Üì ‚Üì \n‚óè Write your article/report/thesis, start at the paper.Rmd file\n‚óè Add the citation style library file (csl) to replace the default provided here, see https://github.com/citation-style-language/\n‚óè Add bibliographic details of cited items to the 'references.bib' file\n‚óè For adding captions & cross-referencing in an Rmd, see https://bookdown.org/yihui/bookdown/\n‚óè For adding citations & reference lists in an Rmd, see http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html\n\nNote that:\n‚ö† Your data files are tracked by Git and will be pushed to GitHub\nRegardless for location option, the contents of the created sub-directories are the same:\n    analysis/\n    |\n    ‚îú‚îÄ‚îÄ paper/\n    ‚îÇ   ‚îú‚îÄ‚îÄ paper.Rmd       # this is the main document to edit\n    ‚îÇ   ‚îî‚îÄ‚îÄ references.bib  # this contains the reference list information\n    \n    ‚îú‚îÄ‚îÄ figures/            # location of the figures produced by the Rmd\n    |\n    ‚îú‚îÄ‚îÄ data/\n    ‚îÇ   ‚îú‚îÄ‚îÄ DO-NOT-EDIT-ANY-FILES-IN-HERE-BY-HAND\n    ‚îÇ   ‚îú‚îÄ‚îÄ raw_data/       # data obtained from elsewhere\n    ‚îÇ   ‚îî‚îÄ‚îÄ derived_data/   # data generated during the analysis\n    |\n    ‚îî‚îÄ‚îÄ templates\n        ‚îú‚îÄ‚îÄ journal-of-archaeological-science.csl\n        |                   # this sets the style of citations & references \n        ‚îú‚îÄ‚îÄ template.docx   # used to style the output of the paper.Rmd\n        ‚îî‚îÄ‚îÄ template.Rmd\nLet‚Äôs inspect\n\npaper.Rmd\npaper.Rmd is ready to write in and render with bookdown. It includes:\n\na YAML header that identifies the references.bib file and the supplied csl file (Citation Style Language) to style the reference list)\na colophon that adds some git commit details to the end of the document. This means that the output file (HTML/PDF/Word) is always traceable to a specific state of the code.\n\n\n\nreferences.bib\nThe references.bib file has just one item to demonstrate the format. It is ready to insert more reference details.\nWe can replace the supplied csl file with a different citation style from https://github.com/citation-style-language/"
  },
  {
    "objectID": "create-compendium.html#commit-and-push-to-github",
    "href": "create-compendium.html#commit-and-push-to-github",
    "title": "Create a Research Compendium",
    "section": "Commit and push to GitHub",
    "text": "Commit and push to GitHub\nYou now have a template reproducible Research Compendium using rrtools!üéâ"
  },
  {
    "objectID": "manage-as-package.html",
    "href": "manage-as-package.html",
    "title": "Manage functionality as a package",
    "section": "",
    "text": "rrtools research compendium structure is based on R packages.\nThe R package structure can help with providing a logical organisation of files, by providing a set of standard locations for certain types of files.\nIn RStudio we use the Build pane when working with packages, which includes a variety of tools for building, documenting, and testing packages. This will appear if Rstudio recognizes the project as an R package."
  },
  {
    "objectID": "manage-as-package.html#setup-data",
    "href": "manage-as-package.html#setup-data",
    "title": "Manage functionality as a package",
    "section": "Setup data",
    "text": "Setup data\n\nCopy data to data/\nTo begin, we will copy diabetes.csv from the workshop materials you downloaded in rrtools-wkshp-materials-master/ to the sub-folder analysis/data/raw_data/ in rrcompendium\nYour data folder should now look like this:\nanalysis/data\n‚îú‚îÄ‚îÄ DO-NOT-EDIT-ANY-FILES-IN-HERE-BY-HAND\n‚îú‚îÄ‚îÄ derived_data\n‚îî‚îÄ‚îÄ raw_data\n    ‚îî‚îÄ‚îÄ diabetes.csv\n\n\n\nInspect analysis.R file\nNext we will open analysis.R in the workshop materials and run the code. The script has some initial setup (mainly installations), then loads the data, groups one of the columns for plotting and then plots the results, which generates a novel figure.\n\nanalysis.R\nFirst, its best to make sure there‚Äôs a CRAN mirror that will be used to install packages. If you don‚Äôt, you could get an error basically saying that CRAN isn‚Äôt set‚Ä¶\n\noptions(repos = list(CRAN = \"http://cran.rstudio.com/\"))\n\n\n# Install pacman\ninstall.packages(\"pacman\")\n\n# Install and/or load necessary packages\npacman::p_load(ggthemes,\n               here,\n               tidyverse)\n\n# Making some global ggplot() theme additions\n# Set global ggplot() theme\ntheme_set(theme_pubclean(base_size = 16))\n\n# Remove legend\ntheme_update(legend.position = \"none\")\n\n# Shift axes title to their relative right\ntheme_update(axis.title = element_text(hjust = 1))\n\n# Remove axes ticks\ntheme_update(axis.ticks = element_blank())\n\n# Colorblind friendly palette\ncbp1 <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\n# load-data\ndata <- read_csv(here::here(\"analysis\", \"data\", \"raw_data\", \"diabetes.csv\")) |>\n# Add a categorical group\n  mutate(Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                            ifelse(Age > 30 & Age <= 50,\n                                   \"Middle\",\n                                   \"Elderly\")),\n         Age = as.character(Age))\n\n\n# Plot Glucose vs. Age group\ndata |>\n  ggplot(aes(x = Glucose, y = fct_rev(Age), fill = Age)) +\n  geom_boxplot() +\n  xlab(\"Glucose (mg/dl)\") +\n  ylab(\"Age group\") +\n  scale_fill_manual(values = cbp1)\n\n\nNow we will create a function to replace the grouping step in the analysis, document it, check it, test and make it available as a package!"
  },
  {
    "objectID": "manage-as-package.html#create-a-package-function",
    "href": "manage-as-package.html#create-a-package-function",
    "title": "Manage functionality as a package",
    "section": "Create a package function",
    "text": "Create a package function\n\nCreate .R function script\nFirst we need an .R file to write our function in.\nTo create or edit .R files in the R/ directory, we can use:\n\nusethis::use_r(\"process-data\") \n\n‚óè Modify 'R/process-data.R'\n‚Ä¢ Call `use_test()` to create a matching test file\nThis creates a file called process-data.R in the R/ directory and opens for editing."
  },
  {
    "objectID": "manage-as-package.html#write-function",
    "href": "manage-as-package.html#write-function",
    "title": "Manage functionality as a package",
    "section": "Write function",
    "text": "Write function\nIn this file, let‚Äôs now create the function to group Age.\nIn particular, we can modify the following code from analysis.R\n\n# Group data\ndata <- read_csv(here::here(\"analysis\", \"data\", \"raw_data\", \"diabetes.csv\")) |>\n  mutate(Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                            ifelse(Age > 30 & Age <= 50,\n                                   \"Middle\",\n                                   \"Elderly\")),\n         Age = as.character(Age))\n\ninto a function like so:\n\ngroup_age <- function(data){\n  dplyr::mutate(data,\n                Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                             ifelse(Age > 30 & Age <=\n                                        50, \"Middle\",\n                                    \"Elderly\")),\n                Age = as.character(Age))\n}\n\nThis takes a dataframe of the data as input and outputs a dataframe with the values of Age grouped for plotting.\nNow, to have our function exported as part of the rrcompendium package, we need to document it using Roxygen2."
  },
  {
    "objectID": "manage-as-package.html#document-function",
    "href": "manage-as-package.html#document-function",
    "title": "Manage functionality as a package",
    "section": "Document function",
    "text": "Document function\nDocumentation is one of the most important aspects of good, reproducible code. Roxygen2 provides a documentation framework in R.\n\n\nRoxygen2 documentation\nRoxygen2 allows us to write specially-structured comments preceding each function definition. These are processed automatically to produce .Rd help files for our functions and control which are exported to the package NAMESPACE.\nSee the Generating Rd files roxygen2 vignette or Karl Broman‚Äôs blog post on writing Roxygen2 documentation for further details.\n\n\n\nInsert Roxygen skeleton\nIn Rstudio, you can insert a Roxygen skeleton by placing the cursor anywhere in the definition of a function, then clicking:\nCode > Insert Roxygen Skeleton\nApplying this to our function results in this Roxygen skeleton:\n#' Title\n#'\n#' @param data\n#'\n#' @return\n#' @export\n#'\n#' @examples\ngroup_age <- function(data){\n  dplyr::mutate(data,\n                Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                                   ifelse(Age > 30 & Age <=\n                                   50, \"Middle\",\n                                   \"Elderly\")),\n                Age = as.character(Age))\n\n\n\nComplete Roxygen documentation\nRoxygen comments start with #' so we can use regular comments for other purposes.\n\nTitle and description\nThe first line is the title of the function.\nThe title is followed by a blank #' line and then a longer description summarizing what the function does, which must be single paragraph.\nSo for our function we could write something like this:\n#' Group age variable\n#'\n#' Group age variable in dataframe containing data from file\n#' `diabetes.csv`\nFurther function details are documented in Roxygen using tags like @tag.\n\n\n\nFunction parameters (arguments)\n@param tags names are automatically extracted from the function for each function argument and document argument descriptions. We can document our single argument by editing the skeleton:\n#' @param data dataframe containing data from file\n#' `diabetes.csv`\n\n\n\nFunction output\nWe use tag @return to describe what the function returns:\n#' @return `data` with variable `Age` grouped for\n#' plotting\n\n\n\nExport function\n@export tells Roxygen2 to add this function as an export in the NAMESPACE file, so that it will be accessible available for use after package installation.\nThe Roxygen skeleton includes the @export tag by default. You can remove it for internal functions that will only be available within the NAMESPACE. You can access internal functions of a package using <package_name>:::\n\n\n\nProvide examples\nThe @examples tag provides executable R code showing how to use the function in practice. This is a very important part of the documentation because many people look at the examples before reading anything else.\nWe‚Äôll skip this for now but come back to it a bit later. Remove the @examples tag for now.\nThe completed function documentation should look something like this:\n#' Group age variable\n#'\n#' Group age variable in dataframe containing data from file\n#' `diabetes.csv`\n#' @param data dataframe containing data from file\n#' `diabetes.csv`\n#' @return `data` with variable `Age` grouped for\n#' plotting\n#' @export\ngroup_age <- function(data){\n        mutate(data,\n                Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                                   ifelse(Age > 30 & Age <= 50, \"Middle\",\n                                          \"Elderly\")),\n                Age = as.character(Age))\n}\n\n\n\n\nLet‚Äôs take a renv::snapshot()!\n\nrenv::snapshot()"
  },
  {
    "objectID": "manage-as-package.html#build-and-install-package",
    "href": "manage-as-package.html#build-and-install-package",
    "title": "Manage functionality as a package",
    "section": "Build and install package",
    "text": "Build and install package\n\nBuild Roxygen documentation\nNow that we‚Äôve annotated our source code we can build the documentation either by clicking on More > Document in the RStudio Build panel or from the console using:\n\ndevtools::document() \n\nThis is a wrapper for the roxygenize() function from the roxygen2 package. This builds the .Rd help files and populates the NAMESPACE\nThe man/ directory will appear and contain an .Rd file for recode_system.\nman\n‚îî‚îÄ‚îÄ group_age.Rd\nand the NAMESPACE now contains an export() entry for recode_system:\n# Generated by roxygen2: do not edit by hand\n\nexport(group_age)\n\n\n\nInstall package\nThe usual workflow for package development is to:\n\nMake some changes\nBuild and install the package\nUnload and reload the package (often in a new R session)\n\nThe best way to install and reload a package in a fresh R session is to use the üî® Install command tab in the Build panel which performs several steps in sequence to ensure a clean and correct result:\n\nUnloads any existing version of the package (including shared libraries if necessary).\nBuilds and installs the package using R CMD INSTALL.\nRestarts the underlying R session to ensure a clean environment for re-loading the package.\nReloads the package in the new R session by executing the library function.\n\nRunning the üî® Install command on our package results in this output in the Build panel output:\n* installing to library ‚Äò/Users/gregchism/Library/R/x86_64/4.1/library‚Äô\n* installing *source* package ‚Äòrrcompendium‚Äô ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\nInstalling package into ‚Äò/Users/gregchism/Library/R/x86_64/4.1/library/00LOCK-rrcompendium/00new‚Äô\n(as ‚Äòlib‚Äô is unspecified)\ntrying URL 'http://cran.rstudio.com/bin/macosx/contrib/4.1/pacman_0.5.1.tgz'\nContent type 'application/x-gzip' length 380131 bytes (371 KB)\n==================================================\ndownloaded 371 KB\n\n\nThe downloaded binary packages are in\n    /var/folders/c0/w15tbmpn36d7jj_tpjm_sz9c0000gn/T//RtmpB7b61P/downloaded_packages\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (rrcompendium)\n\ninstall.packages(\"pacman\")\nand\nRestarting R session‚Ä¶\nin the console.\nWe can inspect the resulting documentation for our function using ?group_age\n\n\n\nAnother renv::snapshot()!\n\nrenv::snapshot()"
  },
  {
    "objectID": "manage-as-package.html#check-package",
    "href": "manage-as-package.html#check-package",
    "title": "Manage functionality as a package",
    "section": "Check package",
    "text": "Check package\n\nAutomated checking\nAn important part of the package development process is R CMD check. R CMD check automatically checks and detects many common problems that can be difficult to find ourselves.\nTo check our package, we can use one of three methods:\n\nUse devtools::check() (my recommended way)\nPress Ctrl/Cmd + Shift + E\nClick on the ‚úÖCheck tab in the Build panel.\n\nThis:\n\nEnsures that the documentation is up-to-date by running devtools::document().\nBundles the package before checking it.\n\nMore info on checks here.\nBoth these run R CMD check which return three types of messages:\n\nERRORs: Severe problems that you should fix regardless of whether or not you‚Äôre submitting to CRAN.\nWARNINGs: Likely problems that you must fix if you‚Äôre planning to submit to CRAN (and a good idea to look into even if you‚Äôre not).\nNOTEs: Mild problems. If you are submitting to CRAN, you should strive to eliminate all NOTEs, even if they are false positives.\n\nLet‚Äôs Check our package:\n\ndevtools::check()\n\nN  checking R code for possible problems (2.4s)\n   group_age: no visible global function definition for ‚Äòmutate‚Äô\n   group_age: no visible binding for global variable ‚ÄòAge‚Äô\n   Undefined global functions or variables:\n     mutate Age\n‚úî  checking Rd files ...\n‚úî  checking Rd metadata ...\n‚úî  checking Rd line widths ...\n‚úî  checking Rd cross-references ...\n‚úî  checking for missing documentation entries ...\n‚úî  checking for code/documentation mismatches (426ms)\n‚úî  checking Rd \\usage sections (563ms)\n‚úî  checking Rd contents ...\n‚úî  checking for unstated dependencies in examples ...\n‚îÄ  checking examples ... NONE\n‚úî  checking for non-standard things in the check directory\n‚úî  checking for detritus in the temp directory\n   \n   See\n     ‚Äò/private/var/folders/c0/w15tbmpn36d7jj_tpjm_sz9c0000gn/T/RtmplWzWzK/rrcompendium.Rcheck/00check.log‚Äô\n   for details.\n   \n   \n‚îÄ‚îÄ R CMD check results ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ rrcompendium 0.0.0.9000 ‚îÄ‚îÄ‚îÄ‚îÄ\nDuration: 10.3s\n\n‚ùØ checking R code for possible problems ... NOTE\n  group_age: no visible global function definition for ‚Äòmutate‚Äô\n  group_age: no visible binding for global variable ‚ÄòAge‚Äô\n  Undefined global functions or variables:\n    mutate Age\n\n0 errors ‚úî | 0 warnings ‚úî | 1 note ‚úñ\nThere are a analysis.R. Let‚Äôs start troubleshooting with:\ngroup_age: no visible global function definition for ‚Äòmutate‚Äô\nWe are using a dplyr functions in our function, mutate(). However, we have not specified that they are imported from the dplyrNAMESPACE so the checks look for functions with those names in our package (rrcompendium) and can‚Äôt find anything.\n\n\n\nAdd namespace to function notation\nTo specify the namespace of a function we use the notation <package_name>::<function_name>, so we need to update this.\n\ngroup_age <- function(data){\n  dplyr::mutate(data,\n                Age = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                             ifelse(Age > 30 & Age <=\n                                        50, \"Middle\",\n                                    \"Elderly\")),\n                Age = as.character(Age))\n}\n\nLet‚Äôs run Check again:\nW  checking dependencies in R code ...\n   '::' or ':::' import not declared from: ‚Äòdplyr‚Äô\n‚úî  checking S3 generic/method consistency (421ms)\n‚úî  checking replacement functions ...\n‚úî  checking foreign function calls ...\nN  checking R code for possible problems (2.5s)\n   group_age: no visible binding for global variable ‚ÄòAge‚Äô\n   Undefined global functions or variables:\n     Age\n‚úî  checking Rd files ...\n‚úî  checking Rd metadata ...\n‚úî  checking Rd line widths ...\n‚úî  checking Rd cross-references ...\n‚úî  checking for missing documentation entries ...\n‚úî  checking for code/documentation mismatches (446ms)\n‚úî  checking Rd \\usage sections (567ms)\n‚úî  checking Rd contents ...\n‚úî  checking for unstated dependencies in examples ...\n‚îÄ  checking examples ... NONE\n‚úî  checking for non-standard things in the check directory\n‚úî  checking for detritus in the temp directory\n   \n   See\n     ‚Äò/Users/gregchism/Library/Mobile Documents/com~apple~CloudDocs/Desktop/rrcompendium.Rcheck/00check.log‚Äô\n   for details.\n   \n   \n‚îÄ‚îÄ R CMD check results ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ rrcompendium 0.0.0.9000 ‚îÄ‚îÄ‚îÄ‚îÄ\nDuration: 10.6s\n\n‚ùØ checking dependencies in R code ... WARNING\n  '::' or ':::' import not declared from: ‚Äòdplyr‚Äô\n\n‚ùØ checking R code for possible problems ... NOTE\n  group_age: no visible binding for global variable ‚ÄòAge‚Äô\n  Undefined global functions or variables:\n    Age\n\n0 errors ‚úî | 1 warning ‚úñ | 1 note ‚úñ\n\n\n\nAdd dependency\nIn this next round of checks, the note about undefined global functions mutate and recode is gone, but now there‚Äôs a warning regarding '::' or ':::' import not declared from: 'dplyr'. It‚Äôs because we want to import functions from dplyr but the package needs to be a dependency in the Imports field of the DESCRIPTION file.\nWe can add dplyr to Imports with:\n\nusethis::use_package(\"dplyr\") \n\n‚úî Setting active project to '/Users/gregchism/Library/Mobile Documents/com~apple~CloudDocs/Desktop/rrcompendium'\n‚úî Adding 'dplyr' to Imports field in DESCRIPTION\n‚Ä¢ Refer to functions with `dplyr::fun()`\nand the DESCRIPTION file now includes\nImports: \n    bookdown,\n    dplyr,\n    here\nRunning Check again, the warning is now gone and we are left with the minor note:\n‚ùØ checking R code for possible problems ... NOTE\n  group_age: no visible binding for global variable ‚ÄòAge‚Äô\n  Undefined global functions or variables:\n    Age\n\n0 errors ‚úî | 0 warnings ‚úî | 1 note ‚úñ\nWe‚Äôll ignore this note for now. It results from the non-standard evaluation used in dplyr functions. See the Programming with dplyr vignette for more.\n\n\n\nTest out function\nRun üî® Install to ensure the installed package is up to date.\nThen let‚Äôs read in some data and test out our function:\n\nlibrary(rrcompendium) \ndata <- readr::read_csv(here::here(\"analysis\", \"data\", \n                                   \"raw_data\", \"gillespie.csv\")) \n\nRows: 768 Columns: 9                                                                 \n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\ndbl (9): Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, Diabetes...\n\ndata\n\n# A tibble: 768 √ó 9\n   Pregnancies Glucose BloodPressure SkinThickness Insulin   BMI Diabet‚Ä¶¬π   Age Outcome\n         <dbl>   <dbl>         <dbl>         <dbl>   <dbl> <dbl>    <dbl> <dbl>   <dbl>\n 1           6     148            72            35       0  33.6    0.627    50       1\n 2           1      85            66            29       0  26.6    0.351    31       0\n 3           8     183            64             0       0  23.3    0.672    32       1\n 4           1      89            66            23      94  28.1    0.167    21       0\n 5           0     137            40            35     168  43.1    2.29     33       1\n 6           5     116            74             0       0  25.6    0.201    30       0\n 7           3      78            50            32      88  31      0.248    26       1\n 8          10     115             0             0       0  35.3    0.134    29       0\n 9           2     197            70            45     543  30.5    0.158    53       1\n10           8     125            96             0       0   0      0.232    54       1\n# ‚Ä¶ with 758 more rows, and abbreviated variable name ¬π‚ÄãDiabetesPedigreeFunction\n\ngroup_age(data) \n\n# A tibble: 768 √ó 9\n   Pregnancies Glucose BloodPressure SkinThickness Insulin   BMI Diabet‚Ä¶¬π Age   Outcome\n         <dbl>   <dbl>         <dbl>         <dbl>   <dbl> <dbl>    <dbl> <chr>   <dbl>\n 1           6     148            72            35       0  33.6    0.627 Elde‚Ä¶       1\n 2           1      85            66            29       0  26.6    0.351 Elde‚Ä¶       0\n 3           8     183            64             0       0  23.3    0.672 Elde‚Ä¶       1\n 4           1      89            66            23      94  28.1    0.167 Elde‚Ä¶       0\n 5           0     137            40            35     168  43.1    2.29  Elde‚Ä¶       1\n 6           5     116            74             0       0  25.6    0.201 Elde‚Ä¶       0\n 7           3      78            50            32      88  31      0.248 Elde‚Ä¶       1\n 8          10     115             0             0       0  35.3    0.134 Elde‚Ä¶       0\n 9           2     197            70            45     543  30.5    0.158 Elde‚Ä¶       1\n10           8     125            96             0       0   0      0.232 Elde‚Ä¶       1\n# ‚Ä¶ with 758 more rows, and abbreviated variable name ¬πDiabetesPedigreeFunction\nIt works! üéâ\n\n\nTime for another renv::snapshot()!\n\nrenv::snapshot()"
  },
  {
    "objectID": "manage-as-package.html#test-function",
    "href": "manage-as-package.html#test-function",
    "title": "Manage functionality as a package",
    "section": "Test function",
    "text": "Test function\nTesting is a vital part of package development. It ensures that our code does what you want it to do.\nOnce we have testing framework, the workflow is straightforward:\n\nModify your code or tests.\nTest your package with Ctrl/Cmd + Shift + T or devtools::test().\nRepeat until all tests pass.\n\n\n\nCreate a test file\nSimilar to usethis::use_r() for package source code files, we can use usethis::use_test() to create the framework for our tests.\n\nusethis::use_test(name = \"process-data\")\n\n‚úî Adding 'testthat' to Suggests field in DESCRIPTION\n‚úî Setting Config/testthat/edition field in DESCRIPTION to '3'\n‚úî Creating 'tests/testthat/'\n‚úî Writing 'tests/testthat.R'\n‚úî Writing 'tests/testthat/test-process-data.R'\n‚Ä¢ Modify 'tests/testthat/test-process-data.R'\nThis will:\n\nCreate a tests/testthat directory.\nAdd testthat to the Suggests field in the DESCRIPTION.\nCreate a file tests/testthat.R that runs tests when R CMD check runs.\nCreate a test file in tests/testthat/ appending test- to the name argument.\n\n\n\ntestthat.R\nThe testthat.R file runs all the tests.\nYou can use this file to load any additional packages required for testing (although explicit NAMESPACE notation :: as in package source code is still preferable to ensure accuracy of tests)\nlibrary(testthat)\nlibrary(rrcompendium)\n\ntest_check(\"rrcompendium\")\n\n\n\ntest-process-data\nusethis::use_test() also creates and opens test file test-process-data and pre-populates it with an example test.\ntest_that(\"multiplication works\", {\n  expect_equal(2 * 2, 4)\n})\nThere are two elements to any test:\n\ndesc: test name. Names should be kept as brief as possible, as they are often used as line prefixes.\ncode: test code containing expectations\n\n\n\n\n\nCreate test data\nTo test our function we‚Äôll need some data. The best way is to include an example dataset, in this case we‚Äôll just use diabetes.csv. However we need to store the data in a directory that is still accessible when the package is built.\nAnything in the .Rbuildignore file will be ignored during building and installation, which currently ignores the entire analysis/ directory, including our data. Note that the order might be different for you, but it shouldn‚Äôt matter.\n^rrcompendium\\.Rproj$\n^\\.Rproj\\.user$\nanalysis\n^LICENSE\\.md$\n^README\\.Rmd$\n^README-.*\\.png$\n^CONDUCT\\.md$\n^CONTRIBUTING\\.md$\n^runtime\\.txt$\nWe can make files available after install by including them in an inst/ directory.\nWhen a package is installed, everything in inst/ is copied into the top-level package directory. You are free to put anything you like in inst/ with one caution: because inst/ is copied into the top-level directory, you should never use a sub-directory with the same name as an existing directory.\nThis means that you should generally avoid inst/build, inst/data, inst/demo, inst/exec, inst/help, inst/html, inst/inst, inst/libs, inst/Meta, inst/man, inst/po, inst/R, inst/src, inst/tests, inst/tools, and inst/vignettes.\n\n\nCreate inst/testdata/ directory\nLet‚Äôs create an inst/ directory and within it a testdata/ sub-directory to save our example data.\n\ndir.create(here::here(\"inst\", \"testdata\"), recursive = T)\n\n\n\n\nCopy example data\nNow let‚Äôs make a copy of diabetes.csv into the inst/testdata/ directory:\n\nfile.copy(from = here::here(\"analysis\", \"data\",\n                           \"raw_data\", \"diabetes.csv\"), \n          to = here::here(\"inst\", \"testdata\"))\n\nYou should now have an inst folder containing the following files\ninst\n‚îî‚îÄ‚îÄ testdata\n    ‚îî‚îÄ‚îÄ diabetes.csv\n\n\n\nInstall\nRun üî® Install so that testdata/ is included in the build.\nWe can now use system.file(), which finds the full names of files in packages, in our test script to load our test data set.\nsystem.file(‚Ä¶, package = \"my_package\") \nIt uses anything supplied to ‚Ä¶ to build the path to the file, much like here::here().\nSo in test-process-data.R, we can now write:\n\ncontext(\"test-process-data\")\n\ndata <- readr::read_csv(system.file(\"testdata\",\n                                    \"gillespie.csv\",\n                                    package = \"rrcompendium\"))\n\nLet‚Äôs take a step back and make sure all of these package dependencies are in out DESCRIPTION.\n\nrrtools::add_dependencies_to_description()\n\nOur Imports should look like this:\nImports: \n    bookdown,\n    dplyr,\n    here,\n    knitr (>= 1.39),\n    pacman (>= 0.5.1),\n    readr (>= 2.1.2),\n    rmarkdown (>= 2.14)\nWe can also use this dataset to provide a working example of recode_system(data) in the function documentation. So let‚Äôs go back to R/process-data.R and add an example to our documentation\n#' @examples {\n#' data <- readr::read_csv(system.file(\"testdata\", \"diabetes.csv\",\n#' package = \"rrcompendium\"))\n#' recode_system_size(data)\n#' }\nDocument and the Install to update package.\n\n\n\n\nWrite test\nLet‚Äôs now write a couple of tests.\n\n\nTest grouping\nFirst let‚Äôs test that grouping works, by checking the unique values of Age after running group_age. Add the following to test-process-data.R:\n\ntest_that(\"grouping works\", {\n  expect_equal(unique(group_age(data)$Age),\n               c(\"Young\", \"Middle\", \"Elderly\"))\n})\n\n\n\n\nTest dimensions\nLet‚Äôs also test that the original dimensions of data are preserved after running our function. Add the following to test-process-data.R:\n\ntest_that(\"data dims preserved\", {\n    expect_equal(dim(group_age(data)),\n                 dim(data))\n})\n\nThe complete test-process-data.R file should look like this:\n\ndata <- readr::read_csv(system.file(\"testdata\",\n                                    \"diabetes.csv\",\n                                    package = \"rrcompendium\"))\n\ntest_that(\"grouping works\", {\n  expect_equal(unique(group_age(data)$Age),\n               c(\"Middle\", \"Young\", \"Elderly\"))\n})\n\ntest_that(\"data dims preserved\", {\n  expect_equal(dim(group_age(data)),\n               dim(data))\n})\n\nSince we are using read_csv from the readr package, if you didn‚Äôt use rrtools::add_dependencies_to_description() above, you will need to add readr to the dependencies.\n\nrrtools::add_dependencies_to_description()\n\nCheck that your Imports and Suggests in the DESCRIPTION looks like this:\nImports: \n    bookdown,\n    dplyr,\n    here,\n    knitr (>= 1.39),\n    pacman (>= 0.5.1),\n    readr (>= 2.1.2),\n    rmarkdown (>= 2.14)\nSuggests: \n    devtools,\n    git2r,\n    testthat (>= 3.0.0)\nOnce our tests are saved, we‚Äôre ready to test our package! üòÉ\n\n\n\n\nTest package\nWe can test our package through:\n\nMore > Test Package in the Build panel\nCtrl/Cmd + Shift + T\ndevtools::test()\n\n\nFailure (test-process-data.R:8:3): grouping works\nunique(group_age(data)$Age) (`actual`) not equal to c(\"Young\", \"Middle\", \"Elderly\") (`expected`).\n\n`actual`:   \"Middle\" \"Young\"  \"Elderly\"\n`expected`: \"Young\"  \"Middle\" \"Elderly\"\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nDuration: 0.2 s\n\n[ FAIL 1 | WARN 0 | SKIP 0 | PASS 1 ]\nInteresting‚Ä¶ There‚Äôs a weird character order Failure. In this case, let‚Äôs just mirror what the actual is as in the expected.\n\ndata <- readr::read_csv(system.file(\"testdata\",\n                                    \"diabetes.csv\",\n                                    package = \"rrcompendium\"))\n\ntest_that(\"grouping works\", {\n  expect_equal(unique(group_age(data)$Age),\n               c(\"Middle\", \"Young\", \"Elderly\"))\n})\n\ntest_that(\"data dims preserved\", {\n  expect_equal(dim(group_age(data)),\n               dim(data))\n})\n\n‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nDuration: 0.1 s\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n\nOur tests pass!!\nüéâ Now every time you check your package, the test will also be run automatically.\n\n\n\nA final renv::snapshot()!\n\nrenv::snapshot()\n\nLet‚Äôs commit our work to GitHub and move on."
  },
  {
    "objectID": "reproduce-distill-paper.html#r-markdown-for-paper-reproduction",
    "href": "reproduce-distill-paper.html#r-markdown-for-paper-reproduction",
    "title": "Reproduce a paper with Distill",
    "section": "R Markdown for paper reproduction",
    "text": "R Markdown for paper reproduction\nScientific and technical writing is generally written using Word, or Google Docs. Think about whether you could reproduce these formats without copy and paste. You could always use LaTeX, but you‚Äôd have to learn the syntax.\n\n\nWhy R Markdown?\n\nReproducibility!\nAvoiding errors\nSeveral output options: PDF, HTML, Word, LaTeX\nCitation formatting made easy\nCollaboration\nYour documents will be prettier than most!\n\n\n\n\nWhy distill?\nThere are several R Markdown templates to produce papers, such as those in rticles and bookdown These are basically all made to have a journal print format, which though is nice, they aren‚Äôt always the best for electronic reading.\nEnter distill, a package that‚Äôs best known for designing websites using R Markdown. You can however also write papers! The output format is very clean and readable. Note that you can take all of your R Markdown script and paste it into another template if you wish.\nSpecific benefits:\n\nReader-friendly that adapts to mobile devices\nCompatible with LaTeX math, citations, and footnotes\nFlexible figure layout (larger width than article text)\nAttractively rendered tables\nSupport for diagramming tools\nInteractive visualizations through JavaScript and D3\nA variety of ways to publish articles, including sets of articles as a Distill website or as a Distill blog\n\nAll of these features help scientists communicate their work more efficiently through the web and R."
  },
  {
    "objectID": "reproduce-distill-paper.html#workshop-setup",
    "href": "reproduce-distill-paper.html#workshop-setup",
    "title": "Reproduce a paper with Distill",
    "section": "Workshop setup",
    "text": "Workshop setup\n\nInstall distill and other packages\n\n# Install pacman to install and load all others\ninstall.packages(\"pacman\")\n\n# Install & load all other packages\npacman::p_load(distill,\n               ggpubr,\n               ggthemes,\n               here,\n               kableExtra,\n               rmarkdown,\n               tidyverse)\n\n# Set global ggplot() theme\ntheme_set(theme_pubclean(base_size = 16))\n\n# Remove legend\ntheme_update(legend.position = \"none\")\n\n# Shift axes title to their relative right\ntheme_update(axis.title = element_text(hjust = 1))\n\n# Remove axes ticks\ntheme_update(axis.ticks = element_blank())\n\n# Colorblind friendly palette\ncbp1 <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")"
  },
  {
    "objectID": "reproduce-distill-paper.html#creating-an-article",
    "href": "reproduce-distill-paper.html#creating-an-article",
    "title": "Reproduce a paper with Distill",
    "section": "Creating an article",
    "text": "Creating an article\nStart by clicking File > New File > R Markdown > From Template > Distill Article\n\nAlternatively, you can create a Distill article in the console\n\ndistill::create_article(\"article.Rmd\")\n\nDistill articles include a title, description, data, author/affiliation, and bibliography in their YAML:\n---\ntitle: \"Reproduce a paper with Distill\"\ndescription: |\n  Example Distill R Markdown paper to use as a template for reproducible scientific and technical writing\nauthor:\n  - name: Greg Chism \n    url: https://gregtchism.netlify.app/\n    affiliation: Data Science Institiute, University of Arizona, Tucson AZ, USA\n    affiliation_url: https://datascience.arizona.edu/\n    orchid_id: 0000-0002-5478-2445\ndate: \"2022-08-22\"\noutput: distill::distill_article:\n---\n\nAuthor fields\n\nAuthor names - required, first_name and last_name, or a single name field (as above)\nAuthor URL - required, can be a GitHub, a personal website, departmental page, etc, specifid using url\nAuthor affiliation - optional, what entity are they affiliated with (university, company, agency, etc.), specified using affiliation.\nOrcid ID - optional, researcher Orchid ID (e.g., Greg Chism: 0000-0002-5478-2445), specified using orchid_id\n\n\n\nDate\nThe date field is denoted as month, day, year or as year, month, day (various notations are supported but only in these orders)\n\n\nBibliography\nDenoded with the bibliography field, this refers to a Bibtex file that contains all sources cited in the article. See the citations resource for more information."
  },
  {
    "objectID": "reproduce-distill-paper.html#figures",
    "href": "reproduce-distill-paper.html#figures",
    "title": "Reproduce a paper with Distill",
    "section": "Figures",
    "text": "Figures\nDistill makes integrating figures into your article straightforward, where the default is the width of the article.\n\ndata <- read.csv(here(\"Repro_Research_rrtools\", \"data\", \"diabetes.csv\")) |>\n    mutate(Age_group = ifelse(Age >= 21 & Age <= 30, \"Young\",\n                            ifelse(Age > 30 & Age <= 50, \"Middle\",\n                                   \"Elderly\")))\n\n# Plot Glucose vs. Age group\ndata |>\n  ggplot(aes(x = Glucose, y = fct_rev(Age_group), fill = Age_group)) +\n    geom_boxplot() +\n    xlab(\"Glucose (mg/dl)\") +\n    ylab(\"Age group\") +\n    scale_fill_manual(values = cbp1)\n\n\n\n\nYou can also add additional horizontal space if needed, which can be accomplished through the layout chunk.\nFor example, let‚Äôs make a faceted plot a outside the bounds of the article text, with the l-body-outset layout in the layout chunk.\n{r layout=\"l-body-outset\", fig.width=6, fig.height=2}\n\n\n\nNote that when specifying a layout you should also specify an appropriate fig.width and fig.height for that layout. These values don‚Äôt determine the absolute size of the figure (that‚Äôs dynamic based on the layout) but they do determine the aspect ratio of the figure.\nSee the documentation on figure layout for details on additional layout options."
  },
  {
    "objectID": "reproduce-distill-paper.html#tables",
    "href": "reproduce-distill-paper.html#tables",
    "title": "Reproduce a paper with Distill",
    "section": "Tables",
    "text": "Tables\nDistill articles can render several HTML options for displaying data frames. For example, pages_table() displays a page-able view of our data.\n\ndata |>\n    rmarkdown::paged_table()\n\n\n\n  \n\n\n\nYou can use layout = \"l-body-outset\" here as with the figure above to occupy more horizontal space than the article text. All of available figure layout options work as expected for tables.\nSee the documentation on table display for details on the various techniques available for rendering tables."
  },
  {
    "objectID": "reproduce-distill-paper.html#equations",
    "href": "reproduce-distill-paper.html#equations",
    "title": "Reproduce a paper with Distill",
    "section": "Equations",
    "text": "Equations\nEmbedded math equations are supported via standard markdown MathJax syntax. For example, the following LaTeX math:\n$$\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n$$\n\\[\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n\\]"
  },
  {
    "objectID": "reproduce-distill-paper.html#citations",
    "href": "reproduce-distill-paper.html#citations",
    "title": "Reproduce a paper with Distill",
    "section": "Citations",
    "text": "Citations\nBibtex is the supported way to make academic citations. To include citations, first create a bibtex file and refer to it from the bibliography field of the YAML front-matter (as illustrated above).\nFor example, your bibliography file might contain:\n@Book{xie2015,\n  title = {Dynamic Documents with R and knitr},\n  author = {Yihui Xie},\n  publisher = {Chapman and Hall/CRC},\n  address = {Boca Raton, Florida},\n  year = {2015},\n  edition = {2nd},\n  note = {ISBN 978-1498716963},\n  url = {http://yihui.name/knitr/},\n}\nCitations are made in the article text with R Markdown notation (e.g., @xie2015), which refers to the ID provided in the bibliography. Multiple IDs can be provided, separated by semicolons.\nIf you have an appendix, a bibliography is automatically created and populated in it.\nSee the article on citations for additional details on using citations, including how to provide the metadata required to make your article more easily citable for others."
  },
  {
    "objectID": "reproduce-distill-paper.html#footnotes-and-asides",
    "href": "reproduce-distill-paper.html#footnotes-and-asides",
    "title": "Reproduce a paper with Distill",
    "section": "Footnotes and asides",
    "text": "Footnotes and asides\nFootnotes use Pandoc markdown notation, for example ^[This will become a hover-able footnote]. The number of the footnote will be automatically generated. 1\nNotes can also be made in the gutter of the article (to the right of article text), done using the <aside> tag.\n\nThis content will appear in the gutter of the article.\n\nYou can also include figures in the gutter, done by enclosing the code chunk which generates the figure within <aside> tags:"
  },
  {
    "objectID": "reproduce-distill-paper.html#table-of-contents",
    "href": "reproduce-distill-paper.html#table-of-contents",
    "title": "Reproduce a paper with Distill",
    "section": "Table of contents",
    "text": "Table of contents\nYou can add a table of contents using the toc option and specify the depths of headers that it will occupy using toc_depth option.\n---\ntitle: \"Reproduce a paper with Distill\"\ndescription: |\n  Example Distill R Markdown paper to use as a template for reproducible scientific and technical writing\noutput: distill::distill_article:\n    toc: true\n    toc_depth: 2\n---\nThe default table of contents depth is 3, so there will be levels 1, 2, and 3 headers included in the table of contents.\nThe table of contents automatically floats to the left when the article is displayed at 1000px wide or greater. To show the table of contents on top, specify toc_float: false\noutput:\n  distill::distill_article:\n    toc: true\n    toc_float: false"
  },
  {
    "objectID": "reproduce-distill-paper.html#code-blocks",
    "href": "reproduce-distill-paper.html#code-blocks",
    "title": "Reproduce a paper with Distill",
    "section": "Code blocks",
    "text": "Code blocks\nDistill does not show the code for chunks from which an output is produced (knitr option echo = FALSE)\necho = FALSE reflects that Distill articles often present the results of analyses and not the underlying code. By setting echo = TRUE, the code will also be displayed.\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n:::\nYou can also include code that is only displayed by specifying eval = FALSE\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n:::\nThere are several default values that Distill uses for knitr chunk options (these defaults also reflect the use case of presenting results/output rather than underlying code):\n\n\n\n\n\n\n\n\nOption\nValue\nComment\n\n\n\n\necho\nFALSE\nDon‚Äôt print code by default.\n\n\nwarning\nFALSE\nDon‚Äôt print warnings by default.\n\n\nmessage\nFALSE\nDon‚Äôt print R messages by default.\n\n\ncomment\nNA\nDon‚Äôt preface R output with a comment.\n\n\nR.options\nlist(width = 70)\n70 character wide console output.\n\n\n\nKeeping R code and output at 70 characters wide (or less) is best for readability across devices and screen sizes.\nThe defaults can be overridden for each code chunk, but you can also set global default. Note that a ‚Äò#‚Äô is in place to prevent it from running in the document.\n# ```{r setup, include = FALSE} \nknitr::opts_chunk$set(\n  echo = TRUE,\n  warning = TRUE,\n  message = TRUE,\n  comment = \"##\",\n  R.options = list(width = 60)\n)\n```"
  },
  {
    "objectID": "reproduce-distill-paper.html#code-folding",
    "href": "reproduce-distill-paper.html#code-folding",
    "title": "Reproduce a paper with Distill",
    "section": "Code folding",
    "text": "Code folding\ncode_folding can be used to hide code by default but readers can optionally show it.\n---\ntitle: \"Reproduce a paper with Distill\"\ndescription: |\n  Example Distill R Markdown paper to use as a template for reproducible scientific and technical writing\noutput: distill::distill_article:\n    code_folding: true\n---\n\n\n\nRetrieved from https://rstudio.github.io/distill\n\n\nYou can also make code_folding a per-chunk basis\n::: {.cell code_folding='true'}\n\n```{.r .cell-code}\n1 + 1\n```\n:::\nProvide a string rather than TRUE to customize the caption (the default is ‚ÄúShow code‚Äù)."
  },
  {
    "objectID": "reproduce-distill-paper.html#syntax-highlighting",
    "href": "reproduce-distill-paper.html#syntax-highlighting",
    "title": "Reproduce a paper with Distill",
    "section": "Syntax highlighting",
    "text": "Syntax highlighting\nSyntax highlighting for R code is done via the downlit package, which provides automatic linking of R functions to their online documentation. By default, highlighting is done using colors optimized for accessibility and color contrast.\nYou can customize highlighting behavior using the highlight and highlight_downlit options. For example, to use the Pandoc ‚Äúhaddock‚Äù highlighting theme and disable the use of downlit, you would do this:\n---\ntitle: \"Reproduce a paper with Distill\"\ndescription: |\n  Example Distill R Markdown paper to use as a template for reproducible scientific and technical writing\noutput: distill::distill_article:\n          highlight: haddock\n          highlight_downlit: false\n---\nAvailable options for highlight include:\n\n\n\nOption(s)\nDescription\n\n\n\n\ndefault\nDefault (accessible) theme\n\n\nrstudio\nRStudio editor theme\n\n\nhaddock, kate, monochrome, pygments, tango\nPandoc highlighting themes.\n\n\nPath to .theme file\nCustom Pandoc theme file."
  },
  {
    "objectID": "reproduce-distill-paper.html#appendices",
    "href": "reproduce-distill-paper.html#appendices",
    "title": "Reproduce a paper with Distill",
    "section": "Appendices",
    "text": "Appendices\nAppendices can be added after your article by adding the .appendix class to any level 1 or level 2 header. For example:\n## Acknowledgments {.appendix}\nThis is a place to recognize people and institutions. It may also be a good place to acknowledge and cite software that makes your work possible.\n\n## Author Contributions {.appendix}\nWe strongly encourage you to include an author contributions statement briefly describing what each author did.\nFootnotes and references will be included in the same section, immediately beneath any custom appendices."
  },
  {
    "objectID": "reproduce-distill-paper.html#theming",
    "href": "reproduce-distill-paper.html#theming",
    "title": "Reproduce a paper with Distill",
    "section": "Theming",
    "text": "Theming\nThe appearance of a Distill article can be customized using a theme and CSS just like Distill sites and blogs. You can use the create_theme() function to add a theme CSS file in the current working directory.\nFor example:\ncreate_theme(name = \"theme\") \nRead more about how to customize a Distill theme. To apply a custom theme to an article, add a theme key to your article‚Äôs YAML front-matter:\n---\ntitle: \"The Sharpe Ratio\"\noutput: \n  distill::distill_article:\n    toc: true\n    theme: theme.css\n---\nOne of the fastest ways to change the default appearance is to use custom Google fonts. To do this, you need to do two things:\n\nEmbed the font using the @import method, and\nSpecify the font in the CSS file.\n\nYou can do both of these things inside your theme.css file. For example, here is an article styled with the demo theme detailed here.\n\nScreenshottheme.css snippet\n\n\n\n\n\n/* base variables */\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Amiri');\n@import url('https://fonts.googleapis.com/css2?family=Bitter');\n@import url('https://fonts.googleapis.com/css2?family=DM+Mono');\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    \"Amiri\", serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       \"Bitter\", sans-serif;\n  --navbar-font:     \"Amiri\", serif;\n}\n/* More properties ... */"
  },
  {
    "objectID": "reproduce-distill-paper.html#acknowledgments",
    "href": "reproduce-distill-paper.html#acknowledgments",
    "title": "Reproduce a paper with Distill",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nTaken from the original source\nDistill for R Markdown builds on the work of many individuals and projects. Shan Carter, Ludwig Schubert, and Christopher Olah created the Distill web framework. John MacFarlane created the Pandoc universal markup converter. Davide Cervone and Volker Sorge created the MathJax library for rendering mathematical notation on the web. Mike Bostock created the D3 library for producing dynamic, interactive data visualizations for the web. We are grateful for the spirit of generosity that moved these individuals to create high-quality open source software for the benefit of all."
  },
  {
    "objectID": "reproduce-distill-paper.html#sec-disclaimer-",
    "href": "reproduce-distill-paper.html#sec-disclaimer-",
    "title": "Reproduce a paper with Distill",
    "section": "Disclaimer",
    "text": "Disclaimer\nThis content was inspired by and duplicated under CC BY 4.0:\nAllaire, et al. (2018, Sept. 10). Distill for R Markdown. Retrieved from https://rstudio.github.io/distill\nMuch of the content was modified either completely or slightly to condense the material and to utilize different data, however some content was duplicated completely."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Marwick, Ben. 2019. ‚ÄúRrtools: Creates a Reproducible Research\nCompendium.‚Äù https://github.com/benmarwick/rrtools.\n\n\nMarwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018. ‚ÄúPackaging\nData Analytical Work Reproducibly Using R (and Friends).‚Äù The\nAmerican Statistician 72 (1): 80‚Äì88. https://doi.org/10.1080/00031305.2017.1375986."
  }
]